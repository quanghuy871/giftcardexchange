define(["jquery","../keys","../utils"],function($,KEYS,Utils){function AllowClear(){}return AllowClear.prototype.bind=function(decorated,container,$container){var self=this;decorated.call(this,container,$container),null==this.placeholder&&this.options.get("debug")&&window.console&&console.error&&console.error("Select2: The `allowClear` option should be used in combination with the `placeholder` option."),this.$selection.on("mousedown",".select2-selection__clear",function(evt){self._handleClear(evt)}),container.on("keypress",function(evt){self._handleKeyboardClear(evt,container)})},AllowClear.prototype._handleClear=function(_,evt){if(!this.options.get("disabled")){var $clear=this.$selection.find(".select2-selection__clear");if(0!==$clear.length){evt.stopPropagation();var data=Utils.GetData($clear[0],"data"),previousVal=this.$element.val();this.$element.val(this.placeholder.id);var unselectData={data:data};if(this.trigger("clear",unselectData),unselectData.prevented)this.$element.val(previousVal);else{for(var d=0;d<data.length;d++)if(unselectData={data:data[d]},this.trigger("unselect",unselectData),unselectData.prevented)return void this.$element.val(previousVal);this.$element.trigger("change"),this.trigger("toggle",{})}}}},AllowClear.prototype._handleKeyboardClear=function(_,evt,container){container.isOpen()||evt.which!=KEYS.DELETE&&evt.which!=KEYS.BACKSPACE||this._handleClear(evt)},AllowClear.prototype.update=function(decorated,data){if(decorated.call(this,data),!(this.$selection.find(".select2-selection__placeholder").length>0||0===data.length)){var $remove=$('<span class="select2-selection__clear">&times;</span>');Utils.StoreData($remove[0],"data",data),this.$selection.find(".select2-selection__rendered").prepend($remove)}},AllowClear});